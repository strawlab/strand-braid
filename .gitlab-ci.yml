variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo-proj
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

cache:
  key: there-is-no-cache
  policy: pull

# At some point, we should do: cargo test --all

# lapack notes for the future:
#   Ubuntu 16.04     - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential libgfortran-5-dev liblapack-dev libblas-dev
#   Debian (jessie?) - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential libgfortran-6-dev liblapack-dev libblas-dev

test_crates:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - DEBIAN_FRONTEND=noninteractive apt-get install -y ffmpeg
    - rustup target add thumbv7em-none-eabihf

    # Test ffmpeg-writer
    - cd media-utils/ffmpeg-writer
    - cargo test --release
    - cd ../..

    # Test ffmpeg-rewriter
    - cd media-utils/ffmpeg-rewriter
    - cargo test --release

    # Test mp4-writer
    - cd $CI_PROJECT_DIR/media-utils/mp4-writer
    - cargo test --release

    # Test fmf-cli
    - cd $CI_PROJECT_DIR/media-utils/fmf/fmf-cli
    - cargo test --release

    # Check that video2rrd compiles
    - cd $CI_PROJECT_DIR/media-utils/video2rrd
    - cargo check

    # Test ads-apriltag
    - cd $CI_PROJECT_DIR/ads-apriltag
    - cargo test --release

    # Test apriltag-track-movie
    - cd $CI_PROJECT_DIR/ads-apriltag/apriltag-track-movie
    - cargo test --release

    # Test strand-bui-backend-session
    - cd $CI_PROJECT_DIR/strand-bui-backend-session
    - cargo test --release

    # Test braid-april-cal
    - cd $CI_PROJECT_DIR/geometry/braid-april-cal
    - cargo test --release

    # Test bundle-adj
    - cd $CI_PROJECT_DIR/geometry/bundle-adj
    - cargo test --release

    # Test braid-april-cal-cli
    - cd $CI_PROJECT_DIR/geometry/braid-april-cal/braid-april-cal-cli
    - cargo test --release -- --nocapture

    # Test flytrax-apriltags-calibration
    - cd $CI_PROJECT_DIR/geometry/braid-april-cal/flytrax-apriltags-calibration
    - cargo test --release

    # Test flytrax-csv-to-braidz
    - cd $CI_PROJECT_DIR/flytrax-csv-to-braidz
    - cargo test --release --features "with_apriltags"
    - cd ..

    # Install opencv
    - cd $CI_PROJECT_DIR
    - _packaging/setup-opencv-4.9.0-static.sh

    # Test freemovr-calibration, which requires opencv
    - cd freemovr-calibration
    - PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig OPENCV_STATIC=1 cargo test --release --features "opencv"
    - cd ..

    # Test strand-cam-offline-checkerboards
    - cd strand-cam/strand-cam-offline-checkerboards
    - PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig OPENCV_STATIC=1 cargo test --release
    - cd ../..

    # Test freemovr-calibration-cli
    - cd freemovr-calibration/freemovr-calibration-cli
    - PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig OPENCV_STATIC=1 cargo build --features "opencv"
    - cd ../..

    # Test Pylon stuff
    - _packaging/install-pylon-linux.sh
    - cd $CI_PROJECT_DIR/camera/ci2-simple-demo
    - LD_LIBRARY_PATH="/opt/pylon/lib" cargo test --features backend_pyloncxx

    - cd $CI_PROJECT_DIR/camera/ci2-simple-async-demo
    - LD_LIBRARY_PATH="/opt/pylon/lib" cargo test --features backend_pyloncxx

    - cd $CI_PROJECT_DIR/camera/ci2-cli
    - cargo test --features backend_pyloncxx

    - cd $CI_PROJECT_DIR/led-box/strand-led-box-comms
    - cargo test

test_flydra2:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: ubuntu:noble
  script:
    - _packaging/setup-ubuntu-base.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    # Install python and pip, but let pip install everything from there.
    - apt-get -y update && DEBIAN_FRONTEND=noninteractive apt install -y python3-full python3-pip python-is-python3 libcairo2-dev

    # Create venv
    - python3 -m venv $CI_PROJECT_DIR/flydra2env

    # Install flydra from pip
    - $CI_PROJECT_DIR/flydra2env/bin/python -m pip install flydra_core
    - $CI_PROJECT_DIR//flydra2env/bin/python -m pip install flydra_analysis

    # Install required python packages
    - $CI_PROJECT_DIR/flydra2env/bin/python -m pip install imageio

    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/braid-offline
    - cargo build --release
    - cd $CI_PROJECT_DIR/flydra2
    - cargo build --release
    - PATH="$CI_PROJECT_DIR/target/release:$PATH" cargo test --release
    - cd $CI_PROJECT_DIR/strand-cam-pseudo-cal
    - cargo test --release
    - cd $CI_PROJECT_DIR/braid-offline
    # test 3D retracking
    - PATH="$CI_PROJECT_DIR/flydra2env/bin:$CI_PROJECT_DIR/target/release:$PATH" cargo test --release
    # test 2D retracking
    - PATH="$CI_PROJECT_DIR/flydra2env/bin:$CI_PROJECT_DIR/target/release:$PATH" cargo run --no-default-features --features "flydra2/bundle_files" --bin braid-offline-retrack --release -- -d test_data/20180330_113743.short -o /tmp/k2d.braidz
    # run retracking script
    - MPLBACKEND=AGG PATH="$CI_PROJECT_DIR/flydra2env/bin:$PATH" ./test_data/retrack-demo.sh
    # TODO: test 3D retracking using `rust-cam-testing-data`
    # cargo run --bin braid-offline-retrack -- -d ..\..\rust-cam-testing-data\20200622_111457.braid -o tmp

test_crates_rust_stable:
  image: rust:1.88
  script:
    # Fail on any compiler warnings.
    - export RUSTFLAGS="-D warnings"

    # First test the crates which do not require packages from the apt
    # repository.

    # Test media-utils/burn-timestamps
    - cd $CI_PROJECT_DIR/media-utils/burn-timestamps
    - cargo test

    # Test media-utils/show-timestamps
    - cd $CI_PROJECT_DIR/media-utils/show-timestamps
    - cargo test

    # Now test the crates which require a C compiler.

    # Install LLVM and clang.
    - cd $CI_PROJECT_DIR
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-dev libclang-dev clang

    - rustup target add thumbv7em-none-eabihf

    # Test zip-or-dir
    - cd $CI_PROJECT_DIR/zip-or-dir
    - cargo test

    # Test fastfreeimage
    - cd $CI_PROJECT_DIR/fastfreeimage
    - cargo test

    # Test mvg
    - cd $CI_PROJECT_DIR/geometry/braid-mvg
    - cargo test --all-features

    # Test braid-april-cal-webapp
    - cd $CI_PROJECT_DIR/geometry/braid-april-cal/braid-april-cal-webapp
    - cargo test

    # Test strand-datetime-conversion
    - cd $CI_PROJECT_DIR/utils/strand-datetime-conversion
    - cargo test

    # Test geometry/simple-obj-parse
    - cd $CI_PROJECT_DIR/geometry/simple-obj-parse
    - cargo test

    # strand-dynamic-frame
    - cd $CI_PROJECT_DIR/strand-dynamic-frame
    - cargo test
    - cargo test --features convert-image
    - cd ..

    # strand-cam
    - cd strand-cam
    - cargo test --no-default-features  --features serve_files
    - cd ..

    # Test imops
    - cd imops
    - cargo test
    - cargo test --no-default-features --features std
    - cargo build --no-default-features --target thumbv7em-none-eabihf
    - cargo bench --no-run
    - cd ..

    # Test braidz-parser
    - cd braidz-parser
    - cargo test
    - cd ..

    # Test tracking
    - cd tracking
    - cargo test
    - cd ..

    # Test ufmf
    - cd $CI_PROJECT_DIR/media-utils/ufmf
    - cargo test

    # Test braid/braid-types
    - cd $CI_PROJECT_DIR/braid/braid-types
    - cargo test

    # Test braid-mvg/mvg-util
    - cd $CI_PROJECT_DIR/geometry/braid-mvg/mvg-util
    - cargo test

    # Test flydra-mvg
    - cd $CI_PROJECT_DIR/geometry/flydra-mvg
    - cargo test

    # Test fmf
    - cd $CI_PROJECT_DIR/media-utils/fmf
    - cargo test

    # Test media-utils/tiff-decoder
    - cd $CI_PROJECT_DIR/media-utils/tiff-decoder
    - cargo test
    - cd ../..

    # Test media-utils/dump-frame
    - cd media-utils/dump-frame
    - cargo test
    - cd ../..

    # Test media-utils/strand-convert
    - cd media-utils/strand-convert
    - cargo test -- --test-threads 1
    - cd ../..

    # Test media-utils/mkv-strand-reader
    - cd media-utils/mkv-strand-reader
    - cargo test
    - cd ../..

    # Test flydra-feature-detector
    - cd flydra-feature-detector
    - cargo test --release --features do_not_use_ipp
    - cd ..

    # Test media-utils/frame-source
    - cd media-utils/frame-source
    - cargo test --features openh264
    - cd ../..

test_crates_rust_nightly:
  image: rust:1.88
  script:
    - export RUSTFLAGS="-D warnings"

    # Use known good nightly
    - rustup update --no-self-update nightly-2025-02-14

    # Test imops with nightly features
    - cd $CI_PROJECT_DIR/imops
    - cargo +nightly-2025-02-14 test --no-default-features --features std,simd

    # Test fastfreeimage
    - cd $CI_PROJECT_DIR/fastfreeimage
    - cargo +nightly-2025-02-14 test --features portsimd
    - cd ..

test_flydra_feature_detector:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - _packaging/setup-ubuntu-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"
    - cargo --version
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd flydra-feature-detector && RUST_BACKTRACE=1 cargo test --features ipp-sys/2019,use_ipp

test_fastimage:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - _packaging/setup-ubuntu-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd fastimage && cargo test --verbose --features "ipp-sys/2019" -- --nocapture --test-threads 1

led-box-ubuntu2004-debs:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - mkdir -p $CI_PROJECT_DIR/focal-led-box-debs
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper

    - cd $CI_PROJECT_DIR/led-box/led-box
    - cp $CI_PROJECT_DIR/build/led-box ./
    - cp $CI_PROJECT_DIR/led-box-firmware-${CI_COMMIT_SHA}.bin ./led-box-firmware.bin
    - dpkg-buildpackage -rfakeroot -b -uc -us
    - cd ..
    - cp -a led-box*.changes $CI_PROJECT_DIR/focal-led-box-debs/
    - cp -a led-box*.deb $CI_PROJECT_DIR/focal-led-box-debs/
  needs:
    - led-box-linux
    - led-box-firmware
  artifacts:
    paths:
      - focal-led-box-debs/
    name: "rust-cam-focal-led-box-debs-${CI_COMMIT_SHA}"

led-box-standalone-ubuntu2004-deb:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - export PATH="$PATH:$CARGO_HOME/bin"
    - mkdir -p $CI_PROJECT_DIR/led-box-standalone-debs
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev cmake pkg-config libfontconfig-dev

    - cd $CI_PROJECT_DIR/led-box/led-box-standalone
    - cargo build --release
    - cp $CI_PROJECT_DIR/target/release/led-box-standalone ./
    - dpkg-buildpackage -rfakeroot -b -uc -us
    - cd ..
    - cp -a led-box-standalone*.changes $CI_PROJECT_DIR/led-box-standalone-debs/
    - cp -a led-box-standalone*.deb $CI_PROJECT_DIR/led-box-standalone-debs/
  artifacts:
    paths:
      - led-box-standalone-debs/
    name: "led-box-standalone-debs-${CI_COMMIT_SHA}"

build-freemovr-calibration:
  image: rust:1.88
  script:
    - export RUSTFLAGS="-D warnings"
    - cd freemovr-calibration/freemovr-calibration-cli
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-linux
    - ldd ../../target/release/freemovr-calibration
    - ls -lh ../../target/release/freemovr-calibration
    - cp -a ../../target/release/freemovr-calibration $CI_PROJECT_DIR/freemovr-cal-linux
  artifacts:
    paths:
      - freemovr-cal-linux
    name: "freemovr-cal-linux-${CI_COMMIT_SHA}"

build-freemovr-calibration-webapp:
  image: rust:1.88
  script:
    - export RUSTFLAGS="-D warnings"
    - export PATH="$PATH:$CARGO_HOME/bin"
    - echo $PATH
    - rustup target add wasm32-unknown-unknown

    - curl --location --remote-name https://github.com/trunk-rs/trunk/releases/download/v0.21.14/trunk-x86_64-unknown-linux-musl.tar.gz
    - tar xzf trunk-x86_64-unknown-linux-musl.tar.gz
    - mkdir -p $CARGO_HOME/bin/
    - mv trunk $CARGO_HOME/bin/
    - trunk --version

    - cd freemovr-calibration/freemovr-calibration-webapp
    - ./build.sh
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-webapp
    - cp -a dist/* $CI_PROJECT_DIR/freemovr-cal-webapp
  artifacts:
    paths:
      - freemovr-cal-webapp
    name: "freemovr-cal-webapp-${CI_COMMIT_SHA}"

deploy-freemovr-calibration-webapp:
  tags:
    - rsync
  script:
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|eh/SuKKTa6MBQdNoN+gs5XJrzLY=|eir5FQuVRJtnzVp3hyOIlPXPEGs= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDI610RLfmUtxDbgDkNdTmnIEAjDsiiOrODVQNkq4TXjvx6+TUSgL2vo1Sxq4c/I9uD3HeXK2HnBH0WJZN5FB9g=" >> ~/.ssh/known_hosts
    - echo "$SSH_STRAWLAB_ORG_VR_CAL" > ~/.ssh/id_rsa

    - cat /root/.ssh/id_rsa
    - ls -l /root/.ssh/id_rsa
    - md5sum /root/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - ls -ltrh freemovr-cal-webapp
    - rsync -avzP --delete freemovr-cal-webapp/ vr-cal-upload@139.162.155.33:/var/www/strawlab.org/html/vr-cal
  environment:
    name: production
    url: https://strawlab.org/vr-cal/
  needs:
    - build-freemovr-calibration-webapp
  when: manual

build-api-docs:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-ubuntu-ipp.sh
    - _packaging/setup-opencv-4.9.0-static.sh
    - export PATH="$PATH:$CARGO_HOME/bin"
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-dev libclang-dev clang

    # build docs for braid-run
    - cd $CI_PROJECT_DIR/braid/braid-run
    - NUM_JOBS=2 cargo doc --no-default-features --features serve_files
    - cd $CI_PROJECT_DIR

    - _packaging/install-pylon-linux.sh
    - cd $CI_PROJECT_DIR/strand-cam
    - >
      source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux &&
      OPENCV_STATIC=1
      PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig
      IPP_STATIC=1
      NUM_JOBS=2
      cargo doc --features serve_files,ipp-sys/2019,fiducial,checkercal
    - cd $CI_PROJECT_DIR
    # remove potential old output directory
    - rm -rf build
    - mkdir build

    # rename directory
    - mv target/doc build/latest
  artifacts:
    paths:
      - build/
    name: "api-docs-${CI_COMMIT_SHA}"

stage-api-docs:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update && apt-get install -y rsync openssh-client
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|zo8kIvGXE6Nf3WNYrk/IwXyNt18=|cMmSpBho6sRzu8Z4+LNSFAFY4L8= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGs/hBRnah/Zi6behPr3X+wamzb6wzwj/rxQAwWX6uXwu/enV2zfyM5TzeAL3PbWXbLsb5bLumCHIDUg15UMLK8=" >> ~/.ssh/known_hosts
    - echo "|1|c1I4D0LzU1HjupN0Wc9Md1QIYVE=|ITvXx3AglaDGm8hhfahKF52hmGU= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGs/hBRnah/Zi6behPr3X+wamzb6wzwj/rxQAwWX6uXwu/enV2zfyM5TzeAL3PbWXbLsb5bLumCHIDUg15UMLK8=" >> ~/.ssh/known_hosts
    - echo "$SSH_STRAWLAB_ORG_STAGING" > ~/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - rsync -az --delete build/latest/ strawlab-org-staging@strawlab-org-staging.strawlab-internal.de:strawlab-org-staging.strawlab-internal.de/strand-braid-api-docs/latest
  environment:
    name: strand-braid-api-docs-staging
    url: http://strawlab-org-staging.strawlab-internal.de/strand-braid-api-docs/latest
  needs:
    - build-api-docs

publish-api-docs:
  # To deploy API docs in the Gitlab CI userinterface for the pipeline, click on
  # this job (not the "play" button but the name of the unstarted job). This
  # will bring up a screen in which variables can be manually entered. Create a
  # variable with key STRAWLAB_ORG_SSH_PRIVATE_KEY in which the value is the SSH
  # private key for the user below. In case accidentally deployment was
  # triggered without entering the variable, delete the job log and the gitlab
  # screen will be available again.
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update && apt-get install -y rsync openssh-client
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|zYmppQbwcvSf9VwRXNIR7kmVjC8=|OQqqxboFIh/377N2Zowb5mf3BlM= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBM7pO/cxdS/WSaaWJ1ZPdnS8F4WC+8LkJVvCZnaKhCZ7EUD+z+Go0Uv3Tc5KomiBDwU5/LyH1dxJDSh7HCaHAj8=" >> ~/.ssh/known_hosts
    - echo "|1|srFMGIUJYliwLud77x10lZeaP84=|xt2VN57X6KsacGPwa2BeUtnJjSQ= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBM7pO/cxdS/WSaaWJ1ZPdnS8F4WC+8LkJVvCZnaKhCZ7EUD+z+Go0Uv3Tc5KomiBDwU5/LyH1dxJDSh7HCaHAj8=" >> ~/.ssh/known_hosts
    # Because the gitlab UI does not allow multiline inputs, the key was encoded
    # with `cat privatekey_filename | base64 | tr "\n" " "`. Take the gitlab CI variable
    # with key STRAWLAB_ORG_SSH_PRIVATE_KEY, save to private SSH key.
    - echo "$STRAWLAB_ORG_SSH_PRIVATE_KEY" | tr " " "\n" | base64 --decode  > ~/.ssh/id_ed25519
    - chmod go-rx ~/.ssh/id_ed25519
    - rsync -az --delete build/latest/ dh_3pakh2@pdx1-shared-a1-23.dreamhost.com:strawlab.org/strand-braid-api-docs/latest
  environment:
    name: strand-braid-api-docs
    url: https://strawlab.org/strand-braid-api-docs/latest
  needs:
    - build-api-docs
  when: manual

strand-cam-pylon-binary:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-opencv-4.9.0-static.sh
    - _packaging/install-pylon-linux.sh
    - _packaging/setup-ubuntu-ipp.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-dev libclang-dev clang
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - rustc --version
    - rustup target add wasm32-unknown-unknown

    - cd strand-cam/yew_frontend && time ./build.sh && cd $CI_PROJECT_DIR/strand-cam/strand-cam-pylon

    - >
      source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux &&
      OPENCV_STATIC=1
      PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig
      IPP_STATIC=1
      RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib"
      NUM_JOBS=2
      cargo build --no-default-features --features "strand-cam/bundle_files ipp-sys/2019 strand-cam/checkercal strand-cam/fiducial imops/simd strand-cam/flydra_feat_detect strand-cam/use_ipp strand-cam/imtrack-absdiff tracing/release_max_level_debug" --release

    - ldd -v $CI_PROJECT_DIR/target/release/strand-cam-pylon
    - $CI_PROJECT_DIR/target/release/strand-cam-pylon --version
    - mkdir -p $CI_PROJECT_DIR/build
    - cp $CI_PROJECT_DIR/target/release/strand-cam-pylon $CI_PROJECT_DIR/build/
    - cd $CI_PROJECT_DIR/write-debian-changelog
    - cargo build --release
    - $CI_PROJECT_DIR/target/release/write-debian-changelog strand-cam-pylon focal > $CI_PROJECT_DIR/build/strand-cam-pylon.changelog
    - cp ../target/release/write-debian-changelog $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "strand-cam-pylon-binary-${CI_COMMIT_SHA}"

strand-cam-vimba-binary:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-opencv-4.9.0-static.sh
    - _packaging/setup-ubuntu-ipp.sh
    - _packaging/setup-ubuntu-vimba.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-dev libclang-dev clang
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - rustc --version
    - rustup target add wasm32-unknown-unknown

    - cd $CI_PROJECT_DIR/strand-cam/yew_frontend && time ./build.sh && cd $CI_PROJECT_DIR/strand-cam/strand-cam-vimba

    - >
      source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux &&
      OPENCV_STATIC=1
      PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig
      IPP_STATIC=1
      RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1"
      NUM_JOBS=2
      cargo build --no-default-features --features "strand-cam/bundle_files ipp-sys/2019 strand-cam/checkercal strand-cam/fiducial imops/simd strand-cam/flydra_feat_detect strand-cam/use_ipp strand-cam/imtrack-absdiff tracing/release_max_level_debug" --release

    - ldd -v $CI_PROJECT_DIR/target/release/strand-cam-vimba
    - $CI_PROJECT_DIR/target/release/strand-cam-vimba --version
    - mkdir -p $CI_PROJECT_DIR/build
    - cp $CI_PROJECT_DIR/target/release/strand-cam-vimba $CI_PROJECT_DIR/build
    - cd $CI_PROJECT_DIR/write-debian-changelog
    - cargo build --release
    - $CI_PROJECT_DIR/target/release/write-debian-changelog strand-cam-vimba focal > $CI_PROJECT_DIR/build/strand-cam-vimba.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-vimba-binary-${CI_COMMIT_SHA}"

flytrax-csv-to-braidz-binary:
  # Use manylinux project to build binary compatible with old glibc
  image: quay.io/pypa/manylinux2014_x86_64
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - export PATH="$PATH:$CARGO_HOME/bin"
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/flytrax-csv-to-braidz
    - cargo test --release --features "with_apriltags"
    - cargo build --release --features "with_apriltags"

    - mkdir -p $CI_PROJECT_DIR/build
    - ldd -v $CI_PROJECT_DIR/target/release/flytrax-csv-to-braidz
    - cp $CI_PROJECT_DIR/target/release/flytrax-csv-to-braidz $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/

strand-cam-flydratrax-pylon-binary:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-opencv-4.9.0-static.sh
    - _packaging/install-pylon-linux.sh
    - _packaging/setup-ubuntu-ipp.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y llvm-dev libclang-dev clang
    - export PATH="$PATH:$CARGO_HOME/bin"
    - export RUSTFLAGS="-D warnings"
    - rustup target add wasm32-unknown-unknown

    - cd strand-cam/yew_frontend && time ./build.sh && cd $CI_PROJECT_DIR/strand-cam/strand-cam-pylon-gui

    - >
      source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux &&
      OPENCV_STATIC=1
      PKG_CONFIG_PATH=/opt/opencv-4.9.0-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig
      IPP_STATIC=1
      RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib"
      NUM_JOBS=2
      cargo build --no-default-features --features "strand-cam/bundle_files strand-cam/flydratrax strand-cam/imtrack-dark-circle ipp-sys/2019 strand-cam/checkercal strand-cam/fiducial imops/simd strand-cam/flydra_feat_detect strand-cam/use_ipp tracing/release_max_level_debug" --release

    - ldd -v $CI_PROJECT_DIR/target/release/strand-cam-pylon-gui
    - $CI_PROJECT_DIR/target/release/strand-cam-pylon-gui --version
    - mkdir -p $CI_PROJECT_DIR/build
    # Rename the target to `strand-cam-flydratrax-pylon`.
    - cp $CI_PROJECT_DIR/target/release/strand-cam-pylon-gui $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon
    - cp $CI_PROJECT_DIR/_packaging/strand-braid/strand-cam-flydratrax-pylon.desktop $CI_PROJECT_DIR/build/
    - cd $CI_PROJECT_DIR/write-debian-changelog
    - cargo build --release
    - $CI_PROJECT_DIR/target/release/write-debian-changelog strand-cam-flydratrax-pylon focal > $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon.changelog
    - cat $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-flydratrax-pylon-linux-${CI_COMMIT_SHA}"

braid-offline-static:
  # Use manylinux project to build binary compatible with old glibc
  image: quay.io/pypa/manylinux2014_x86_64
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - export PATH="$PATH:$CARGO_HOME/bin"
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/braid-offline
    - cargo build --release
    - ldd -v $CI_PROJECT_DIR/target/release/braid-offline-retrack
    - ldd -v $CI_PROJECT_DIR/target/release/compute-flydra1-compat

    - mkdir -p $CI_PROJECT_DIR/build
    - cp $CI_PROJECT_DIR/target/release/braid-offline-retrack $CI_PROJECT_DIR/build/
    - cp $CI_PROJECT_DIR/target/release/compute-flydra1-compat $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "braid-offline-static-${CI_COMMIT_SHA}"

braid-process-video:
  # Build on Ubuntu Focal (20.04) but doesn't link libraries with
  # backward-incompatible ABIs (ssl), so it runs on new Ubuntu, also.
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper git pkg-config libclang-dev libvpx-dev curl

    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd braid-process-video
    - cargo test --release
    - cargo build --release
    - ldd -v ../target/release/braid-process-video

    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/braid-process-video $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "braid-process-video-${CI_COMMIT_SHA}"

slow-tests:
  image: ubuntu:focal
  when: manual
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git pkg-config libclang-dev curl build-essential libvpx-dev zip octave
    - cc --version

    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/geometry/mcsc-structs
    - ./package-mcsc-zip.sh

    - cd $CI_PROJECT_DIR/geometry/braidz-mcsc
    - cargo test --release -- --include-ignored

    - cd $CI_PROJECT_DIR/braid-process-video
    - cargo test --release -- --include-ignored

extra-programs:
  # Build on Ubuntu Focal (20.04) but doesn't link libraries with
  # backward-incompatible ABIs (ssl), so it runs on new Ubuntu, also.
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - mkdir -p $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/geometry/braid-mvg/mvg-util
    - cargo build --release
    - cp $CI_PROJECT_DIR/target/release/cal-to-xml $CI_PROJECT_DIR/build
    - cp $CI_PROJECT_DIR/target/release/align-calibration $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/geometry/mcsc-structs
    - ./package-mcsc-zip.sh

    - cd $CI_PROJECT_DIR/geometry/braidz-mcsc
    - cargo build --release
    - cp $CI_PROJECT_DIR/target/release/braidz-mcsc $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/geometry/braid-april-cal/braid-april-cal-cli
    - cargo build --release
    - cp $CI_PROJECT_DIR/target/release/braid-april-cal-cli $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/braidz-rerun/braidz-export-rrd
    - cargo build --release
    - ldd -v $CI_PROJECT_DIR/target/release/braidz-export-rrd
    - cp $CI_PROJECT_DIR/target/release/braidz-export-rrd $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/braidz-parser/braidz-cli
    - cargo build --release
    - cp ../../target/release/braidz-cli $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/media-utils/strand-convert
    - cargo build --release
    - cp ../../target/release/strand-convert $CI_PROJECT_DIR/build

    - cd $CI_PROJECT_DIR/media-utils/show-timestamps
    - cargo build --release
    - cp ../../target/release/show-timestamps $CI_PROJECT_DIR/build
  artifacts:
    paths:
      - build/
    name: "extra-programs-${CI_COMMIT_SHA}"

fmf-cli:
  # Build on Ubuntu Focal (20.04) but doesn't link libraries with
  # backward-incompatible ABIs (ssl), so it runs on new Ubuntu, also.
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/media-utils/fmf/fmf-cli
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/build
    - ldd -v $CI_PROJECT_DIR/target/release/fmf
    - cp $CI_PROJECT_DIR/target/release/fmf $CI_PROJECT_DIR/build
  artifacts:
    paths:
      - build/
    name: "fmf-cli-${CI_COMMIT_SHA}"

braid-webapps:
  image: rust:1.88
  script:
    - export RUSTFLAGS="-D warnings"
    - export PATH="$PATH:$CARGO_HOME/bin"

    - curl --location --remote-name https://github.com/trunk-rs/trunk/releases/download/v0.21.14/trunk-x86_64-unknown-linux-musl.tar.gz
    - tar xzf trunk-x86_64-unknown-linux-musl.tar.gz
    - mkdir -p $CARGO_HOME/bin/
    - mv trunk $CARGO_HOME/bin/
    - trunk --version

    - rustup target add wasm32-unknown-unknown

    - cd $CI_PROJECT_DIR/braidz-viewer
    - ./build.sh

    - cd $CI_PROJECT_DIR/geometry/braid-april-cal/braid-april-cal-webapp
    - ./build.sh

braid-run-binary:
  # Build on Ubuntu Focal (20.04) but doesn't link libraries with
  # backward-incompatible ABIs (ssl), so it runs on new Ubuntu, also.
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - export PATH="$PATH:$CARGO_HOME/bin"
    - rustup target add wasm32-unknown-unknown
    # - export RUSTFLAGS="-D warnings"

    # build mainbrain web frontend
    - cd $CI_PROJECT_DIR/braid/braid-run/braid_frontend
    - ./build.sh

    - mkdir -p $CI_PROJECT_DIR/build

    # build braid-run
    - cd $CI_PROJECT_DIR/braid/braid-run
    - RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1" NUM_JOBS=2 cargo build --no-default-features --features bundle_files,tracing/release_max_level_debug --release
    - ldd -v $CI_PROJECT_DIR/target/release/braid-run
    - cp ../../target/release/braid-run $CI_PROJECT_DIR/build

    # build braid
    - cd $CI_PROJECT_DIR/braid
    - NUM_JOBS=2 cargo build --release
    - ../target/release/braid-default-config # ensure default config gets printed
    - ../target/release/braid-show-config simple.toml # ensure simple.toml config parses
    - ldd -v $CI_PROJECT_DIR/target/release/braid
    - cp ../target/release/braid $CI_PROJECT_DIR/build
    - cp ../target/release/braid-show-config $CI_PROJECT_DIR/build
    - cp ../target/release/braid-default-config $CI_PROJECT_DIR/build

  artifacts:
    paths:
      - build/
    name: "braid-run-binary-${CI_COMMIT_SHA}"

led-box-linux:
  image: rust:1.88
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y libudev-dev
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/led-box/led-box
    - NUM_JOBS=2 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1" cargo build --release
    - mkdir -p $CI_PROJECT_DIR/build
    - cp $CI_PROJECT_DIR/target/release/led-box $CI_PROJECT_DIR/build/led-box
  artifacts:
    paths:
      - build/
    name: "led-box-linux-${CI_COMMIT_SHA}"

led-box-firmware:
  image: rust:1.88
  script:
    - rustc --version
    - cd led-box/led-box-firmware

    - cargo install cargo-binutils

    - rustup component add llvm-tools-preview
    - rustup component add rust-src
    - rustup target add thumbv7em-none-eabihf
    - cargo build --release
    - cargo objcopy --release -- -O binary $CI_PROJECT_DIR/led-box-firmware-${CI_COMMIT_SHA}.bin
  artifacts:
    paths:
      - led-box-firmware-${CI_COMMIT_SHA}.bin
    name: "led-box-firmware-${CI_COMMIT_SHA}"

# -------

# build the final downloadable .deb
strand-braid-ubuntu-2404:
  image: ubuntu:noble
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh

    # The debian packaging infrastructure wants to have the .so files available to automatically determine which packages to depend on. The
    # package list here is probably more than needed, but should contain the required subset.
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper libudev-dev zlib1g-dev curl

    # Download pylon and install so dpkg figues out the source
    - $CI_PROJECT_DIR/_packaging/install-pylon-linux.sh
    # Download vimba and install
    - $CI_PROJECT_DIR/_packaging/setup-ubuntu-vimba.sh

    - mkdir -p strand-braid-ubuntu-2404-${CI_COMMIT_TAG}

    - cd $CI_PROJECT_DIR/_packaging
    - pwd
    - ls -l $CI_PROJECT_DIR/build
    - $CI_PROJECT_DIR/build/strand-cam-pylon --version
    - $CI_PROJECT_DIR/build/braid-run --version
    - ldd -v $CI_PROJECT_DIR/build/flytrax-csv-to-braidz
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-vimba
    - ldd -v $CI_PROJECT_DIR/build/braid
    - ldd -v $CI_PROJECT_DIR/build/braid-run
    - ldd -v $CI_PROJECT_DIR/build/cal-to-xml
    - ldd -v $CI_PROJECT_DIR/build/align-calibration
    - ldd -v $CI_PROJECT_DIR/build/braidz-mcsc
    - ldd -v $CI_PROJECT_DIR/build/braid-april-cal-cli
    - ldd -v $CI_PROJECT_DIR/build/braidz-export-rrd
    - ldd -v $CI_PROJECT_DIR/build/braid-process-video
    - make
    - for F in *.deb; do echo; echo $F; dpkg-deb -I $F; done
    - cp -a *.deb $CI_PROJECT_DIR/strand-braid-ubuntu-2404-${CI_COMMIT_TAG}/

    - cp $CI_PROJECT_DIR/_packaging/ubuntu-installer-zip-readme.txt $CI_PROJECT_DIR/strand-braid-ubuntu-2404-${CI_COMMIT_TAG}/README.txt
    - ls -lh $CI_PROJECT_DIR/strand-braid-ubuntu-2404-${CI_COMMIT_TAG}/
    - dpkg --contents $CI_PROJECT_DIR/strand-braid-ubuntu-2404-${CI_COMMIT_TAG}/*.deb
  needs:
    - braid-offline-static
    - braid-process-video
    - braid-run-binary
    - extra-programs
    - fmf-cli
    - strand-cam-vimba-binary
    - strand-cam-pylon-binary
    - flytrax-csv-to-braidz-binary
    - strand-cam-flydratrax-pylon-binary
  # For releases, we should upload the .zip to the github releases page, as the
  # zip (but not the deb) will include that this is for "ubuntu-2404" in the
  # filename.
  artifacts:
    paths:
      - strand-braid-ubuntu-2404-${CI_COMMIT_TAG}/
    name: "strand-braid-ubuntu-2404-${CI_COMMIT_TAG}"

# build the final downloadable .deb
strand-braid-ubuntu-2004:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh

    # The debian packaging infrastructure wants to have the .so files available to automatically determine which packages to depend on. The
    # package list here is probably more than needed, but should contain the required subset.
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper libudev-dev zlib1g-dev curl

    # Download pylon and install so dpkg figues out the source
    - $CI_PROJECT_DIR/_packaging/install-pylon-linux.sh
    # Download vimba and install
    - $CI_PROJECT_DIR/_packaging/setup-ubuntu-vimba.sh

    - mkdir -p strand-braid-ubuntu-2004-${CI_COMMIT_TAG}

    - cd $CI_PROJECT_DIR/_packaging
    - pwd
    - ls -l $CI_PROJECT_DIR/build
    - $CI_PROJECT_DIR/build/strand-cam-pylon --version
    - $CI_PROJECT_DIR/build/braid-run --version
    - ldd -v $CI_PROJECT_DIR/build/flytrax-csv-to-braidz
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-vimba
    - ldd -v $CI_PROJECT_DIR/build/braid
    - ldd -v $CI_PROJECT_DIR/build/braid-run
    - ldd -v $CI_PROJECT_DIR/build/cal-to-xml
    - ldd -v $CI_PROJECT_DIR/build/align-calibration
    - ldd -v $CI_PROJECT_DIR/build/braidz-mcsc
    - ldd -v $CI_PROJECT_DIR/build/braid-april-cal-cli
    - ldd -v $CI_PROJECT_DIR/build/braidz-export-rrd
    - ldd -v $CI_PROJECT_DIR/build/braid-process-video
    - make
    - for F in *.deb; do echo; echo $F; dpkg-deb -I $F; done
    - cp -a *.deb $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/

    - cp $CI_PROJECT_DIR/_packaging/ubuntu-installer-zip-readme.txt $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/README.txt
    - ls -lh $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/
    - dpkg --contents $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/*.deb
  needs:
    - braid-offline-static
    - braid-process-video
    - braid-run-binary
    - extra-programs
    - fmf-cli
    - strand-cam-vimba-binary
    - strand-cam-pylon-binary
    - flytrax-csv-to-braidz-binary
    - strand-cam-flydratrax-pylon-binary
  # For releases, we should upload the .zip to the github releases page, as the
  # zip (but not the deb) will include that this is for "ubuntu-2004" in the
  # filename.
  artifacts:
    paths:
      - strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/
    name: "strand-braid-ubuntu-2004-${CI_COMMIT_TAG}"

# build the final downloadable .deb
strand-braid-ubuntu-2204:
  image: ubuntu:jammy
  script:
    - _packaging/setup-ubuntu-apt-proxy.sh

    # The debian packaging infrastructure wants to have the .so files available to automatically determine which packages to depend on. The
    # package list here is probably more than needed, but should contain the required subset.
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper libudev-dev zlib1g-dev curl

    # Download pylon and install so dpkg figues out the source
    - $CI_PROJECT_DIR/_packaging/install-pylon-linux.sh
    # Download vimba and install
    - $CI_PROJECT_DIR/_packaging/setup-ubuntu-vimba.sh

    - mkdir -p strand-braid-ubuntu-2204-${CI_COMMIT_TAG}

    - cd $CI_PROJECT_DIR/_packaging
    - pwd
    - ls -l $CI_PROJECT_DIR/build
    - $CI_PROJECT_DIR/build/strand-cam-pylon --version
    - $CI_PROJECT_DIR/build/braid-run --version
    - ldd -v $CI_PROJECT_DIR/build/flytrax-csv-to-braidz
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-flydratrax-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-pylon
    - ldd -v $CI_PROJECT_DIR/build/strand-cam-vimba
    - ldd -v $CI_PROJECT_DIR/build/braid
    - ldd -v $CI_PROJECT_DIR/build/braid-run
    - ldd -v $CI_PROJECT_DIR/build/cal-to-xml
    - ldd -v $CI_PROJECT_DIR/build/align-calibration
    - ldd -v $CI_PROJECT_DIR/build/braidz-mcsc
    - ldd -v $CI_PROJECT_DIR/build/braid-april-cal-cli
    - ldd -v $CI_PROJECT_DIR/build/braidz-export-rrd
    - ldd -v $CI_PROJECT_DIR/build/braid-process-video
    - make
    - for F in *.deb; do echo; echo $F; dpkg-deb -I $F; done
    - cp -a *.deb $CI_PROJECT_DIR/strand-braid-ubuntu-2204-${CI_COMMIT_TAG}/

    - cp $CI_PROJECT_DIR/_packaging/ubuntu-installer-zip-readme.txt $CI_PROJECT_DIR/strand-braid-ubuntu-2204-${CI_COMMIT_TAG}/README.txt
    - ls -lh $CI_PROJECT_DIR/strand-braid-ubuntu-2204-${CI_COMMIT_TAG}/
    - dpkg --contents $CI_PROJECT_DIR/strand-braid-ubuntu-2204-${CI_COMMIT_TAG}/*.deb
  needs:
    - braid-offline-static
    - braid-process-video
    - braid-run-binary
    - extra-programs
    - fmf-cli
    - strand-cam-vimba-binary
    - strand-cam-pylon-binary
    - flytrax-csv-to-braidz-binary
    - strand-cam-flydratrax-pylon-binary
  # For releases, we should upload the .zip to the github releases page, as the
  # zip (but not the deb) will include that this is for "ubuntu-2204" in the
  # filename.
  artifacts:
    paths:
      - strand-braid-ubuntu-2204-${CI_COMMIT_TAG}/
    name: "strand-braid-ubuntu-2204-${CI_COMMIT_TAG}"

build_simple:
  image: gitlab.strawlab.org:4567/straw/rust-cam/focal-base:0.0.2
  script:
    # Put them on the path
    - export PATH="$PATH:$CARGO_HOME/bin"
    - rustup target add wasm32-unknown-unknown
    # Install Pylon
    - _packaging/install-pylon-linux.sh

    # Build strand-cam-pylon with simplest build configuration possible
    - cd $CI_PROJECT_DIR/strand-cam/yew_frontend
    - ./build.sh
    - cd $CI_PROJECT_DIR/strand-cam/strand-cam-pylon
    - cargo build --release

    # Build braid-run with simplest build configuration possible
    - cd $CI_PROJECT_DIR/braid/braid-run/braid_frontend
    - ./build.sh
    - cd $CI_PROJECT_DIR/braid/braid-run
    - cargo build --release

test_user_guide:
  image: rust:1.88
  script:
    - cd strand-braid-user/users-guide
    - curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.18/mdbook-v0.4.18-x86_64-unknown-linux-gnu.tar.gz | tar -xz
    - ./mdbook test
